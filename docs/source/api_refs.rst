请求类型参考
====================================

本章节列出了所有目前支持的客户端请求类型，并介绍了其格式规范。

您可以在任何您觉得合适的时候检查这里的内容，或许会对您的开发工作有所帮助。


用户鉴权标头
------------------------

对于大多数在下文即将提到的请求而言（通常而言，这即指除了 login 和 disconnect 
的其他所有请求），都需要一个包含用户授权信息的标头来帮助服务器识别和验证用户操
作的合法性。

它在作为通常的信息传输载体的 json 文本中应处于如下位置：

.. code-block:: json
    
    {
        "auth": {
            "username": "",
            "token": ""
        }
    }

下表以 json 的术语组织了表格结构。

.. list-table:: auth 标头
    :widths: 15 10 30
    :header-rows: 1

    * - 键名
      - 类型
      - 描述
    * - username
      - TEXT
      - 该名称对应的值记录请求用户的用户名。
    * - token
      - TEXT
      - 记录用户的 token。在验证时，服务器将检查 token 是否仍然有效，
        并确认 username 与 token 是否相对应；不过，目前仍然可以通过解析 
        token 来获知用户名（未来可能会对 token 进行加密）。


请求类型一览
--------------------

以下介绍了所有目前支持的请求类型。

.. note:: 
    尽管我们试图尽快列举所有新版本支持的请求类型，但为它们一一撰写详细的说明
    绝非易事。不过，出于测试的需要，我们会在服务端的 `cli/client.py` 中提供
    可供运行的测试请求——在新的文档完成之前，参考那其中的请求格式或将有些帮助。

request::login
^^^^^^^^^^^^^^^^^^^^^

该请求执行与用户登录相关的操作。它需要 data 键下的一些数据作为必要的信息；
它不需要 auth 标头即可使用。

.. list-table:: data 标头
    :widths: 15 10 30
    :header-rows: 1

    * - 键名
      - 类型
      - 描述
    * - username
      - TEXT
      - 该名称对应的值记录请求用户的用户名。
    * - password
      - TEXT
      - 记录用户的密码。根据服务端的逻辑，该密码将在到达服务器后与 salt
        再次执行一次运算；它实际上是用户使用的“可读性密码”经过不可逆运算
        后得到的结果，也就是说，对用户密码的验证实际上是对这一运算后结果
        的验证，而非对原始的“可读性密码”的验证。

服务端响应：

.. list-table:: 响应结构
    :widths: 15 10 30
    :header-rows: 1

    * - 键名
      - 类型
      - 描述
    * - code
      - INTEGER
      - 对应的键值为本次请求返回的状态码。
    * - msg
      - TEXT
      - 响应所返回的较为简短的信息描述。这并不是所有服务端必须支持的。
    * - token
      - TEXT
      - 记录登录成功后服务端生成给客户端的用户令牌。该令牌默认将在3600
        秒后过期。如果登录没有成功，则可能不会附带此键。

若登录成功，则服务器将在响应中返回用户令牌。使用该令牌是代表用户执行诸多操作的唯一途径。

如果登录失败，则服务端可能根据其策略延迟响应时间。这一策略的默认值通常为 3 秒。

在本请求中可能出现的返回码：

.. list-table:: 返回码列表
    :widths: 15 10 30
    :header-rows: 1

    * - 返回码
      - 含义
      - 解释
    * - 0
      - 登录正常完成。
      - 
    * - -1
      - 缺少必要的数据结构。
      - 未附带 data 键。
    * - -2
      - data 键确已提供，但并未提供所需的用户名和密码。
      - 
    * - 401
      - 由于凭据无效，请求被拒绝。
      - 用户名或与密码不匹配。


request::refreshToken
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

该请求用于刷新用户 token。它不需要 data 键提供数据；
它需要 auth 标头，这将作为验证和旧 token 的凭据。

服务端响应：

.. list-table:: 响应结构
    :widths: 15 10 30
    :header-rows: 1

    * - 键名
      - 类型
      - 描述
    * - code
      - INTEGER
      - 对应的键值为本次请求返回的状态码。
    * - msg
      - TEXT
      - 响应所返回的较为简短的信息描述。这并不是所有服务端必须支持的。
    * - token
      - TEXT
      - 记录刷新成功后服务端生成给客户端的用户令牌。该令牌默认将在3600
        秒后过期。如果刷新没有成功，则可能不会附带此键。

在本请求中可能出现的返回码：

.. list-table:: 返回码列表
    :widths: 15 10 30
    :header-rows: 1

    * - 返回码
      - 含义
      - 解释
    * - 0
      - 刷新正常完成。
      - 
    * - 401
      - 由于凭据无效，请求被拒绝。
      - 用户名与 token 不匹配，或 token 无效。

尽管我们目前没有做出进一步的限制，但我们推荐 **在必要的时候才刷新令牌**。
未来可能会限制允许进行刷新的开始时间；同时，过多的 token 也会对访问管理造成负担。


request::disconnect
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

该请求用于告知服务器断开连接。发出该请求将使得服务端尝试尽可能友好地关闭连接，避免
突然的异常。

该请求无需附带任何 data 或 auth 标头。返回内容不是一个 json 文本——在一些服务端中，
它是 "Goodbye"。但任何返回内容都仅用于表明服务端已处理该请求，客户端不应在发出本请
求后继续发出新的请求，因此时服务端的连接已经关闭。


request::operateFile
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

该请求用于操作 **已经存在** 的文件。为了创建并不存在的文件，请参见 :ref:`createFile` 
一节。它需要 data 标头中的许多信息来处理请求。

.. list-table:: data 标头
    :widths: 15 10 30
    :header-rows: 1

    * - 键名
      - 类型
      - 描述
    * - file_id
      - TEXT
      - 请求文件在伪路径中的对应 id。
    * - action
      - TEXT
      - 要对文件执行的操作。

operateFile 请求包含多个 action ，目前支持的 action 有 `read`, `write`, `rename`, 
`delete`, `permanently_delete`, `recover` 。

.. list-table:: action 一览
    :widths: 15 10 30
    :header-rows: 1

    * - action
      - 描述
      - 要求
    * - read
      - 仅读取文件。这将创建一个读取性文件任务。
      - 用户拥有读取该文件的权限。有关对权限的判断，请参见 :ref:`match_rules` 一节；另外，
        若文件已被删除，则需要额外的参数和 `view_deleted` 权限。
    * - write
      - 写入文件。将创建一个允许上传的文件任务，并在成功上传后覆盖原文件。
      - 具有写入该文件的权限；文件不能已被标记为删除。
    * - rename
      - 重命名文件。
      - 需要用户拥有相关权限。
    * - delete
      - 将文件标记为“已删除”，并使其在回收期过后被真正删除。文件不能已被标记为删除。
      - 拥有删除文件的权限。
    * - permanently_delete
      - 无视回收期，执行永久删除操作。
      - 需要用户拥有 `permanently_delete` 权限。
    * - recover
      - 恢复被标记为删除的文件。
      - 需要用户拥有 `recover` 和 `view_deleted` 权限。后者是使用前者权限的前提。
 


.. _createFile:

request::createFile
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

该请求用于创建一个新文件。

.. versionchanged:: 1.0.0.20230720_alpha
    现在请求由 `uploadFile` 更名为 `createFile` 。